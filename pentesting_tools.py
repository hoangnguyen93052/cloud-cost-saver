import os
import json
import subprocess
from datetime import datetime

class PentestTool:
    def __init__(self, name, description, command):
        self.name = name
        self.description = description
        self.command = command

    def run(self):
        print(f"Running {self.name}...")
        process = subprocess.run(self.command, shell=True, capture_output=True, text=True)
        return process.stdout, process.stderr

    def __str__(self):
        return f"{self.name}: {self.description}"

class ToolManager:
    def __init__(self):
        self.tools = []

    def add_tool(self, tool):
        self.tools.append(tool)

    def list_tools(self):
        for tool in self.tools:
            print(tool)

    def run_tool(self, tool_name):
        for tool in self.tools:
            if tool.name == tool_name:
                output, error = tool.run()
                print(f"Output of {tool_name}:\n{output}")
                if error:
                    print(f"Error:\n{error}")

def load_tools_from_json(file_path):
    with open(file_path, 'r') as f:
        data = json.load(f)
    tools = []
    for item in data:
        tool = PentestTool(item['name'], item['description'], item['command'])
        tools.append(tool)
    return tools

def save_tools_to_json(tools, file_path):
    data = []
    for tool in tools:
        data.append({
            'name': tool.name,
            'description': tool.description,
            'command': tool.command
        })
    with open(file_path, 'w') as f:
        json.dump(data, f, indent=4)

def main():
    tool_manager = ToolManager()
    tools_file = 'tools.json'

    if os.path.exists(tools_file):
        tools = load_tools_from_json(tools_file)
        for tool in tools:
            tool_manager.add_tool(tool)

    while True:
        print("\nPentesting Tools Manager")
        print("1. List Tools")
        print("2. Run Tool")
        print("3. Add Tool")
        print("4. Save Tools")
        print("5. Exit")
        choice = input("Select an option: ")
        
        if choice == '1':
            tool_manager.list_tools()

        elif choice == '2':
            tool_name = input("Enter tool name to run: ")
            tool_manager.run_tool(tool_name)

        elif choice == '3':
            name = input("Enter tool name: ")
            description = input("Enter tool description: ")
            command = input("Enter tool command: ")
            new_tool = PentestTool(name, description, command)
            tool_manager.add_tool(new_tool)
            print(f"Tool '{name}' added.")

        elif choice == '4':
            save_tools_to_json(tool_manager.tools, tools_file)
            print("Tools saved to JSON file.")

        elif choice == '5':
            print("Exiting...")
            break

        else:
            print("Invalid option. Please try again.")

if __name__ == "__main__":
    main()

# Sample JSON for tools.json
# [
#     {"name": "nmap", "description": "Network exploration tool and security/port scanner", "command": "nmap -sP 192.168.1.0/24"},
#     {"name": "sqlmap", "description": "Automatic SQL injection and database takeover tool", "command": "sqlmap -u http://example.com/vuln.php?id=1"},
#     {"name": "burpsuite", "description": "Web vulnerability scanner", "command": "java -jar burpsuite.jar"}
# ]

def timestamp():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def log_event(event):
    with open('pentest_events.log', 'a') as log_file:
        log_file.write(f"{timestamp()} - {event}\n")

# Extend functionality
def view_event_log():
    if os.path.exists('pentest_events.log'):
        with open('pentest_events.log', 'r') as log_file:
            print(log_file.read())
    else:
        print("No logs found.")

if __name__ == "__main__":
    main()
    log_event("Tool Manager Started.")